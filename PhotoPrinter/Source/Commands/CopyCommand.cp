/*	File:		CopyCommand.cp	Contains:	Implementation of the Copy command (in Edit menu).	Written by:	David Dunham	Copyright:	Copyright ©2001 by Electric Fish, Inc.  All Rights reserved.	Change History (most recent first):		13 Aug 2001		drd		Don't leak the clipboard data!		16 Jul 2001		drd		172 DonÕt enable if selection is all placeholders		11 Jul 2001		rmgw	kDragFlavor => kClipFlavor.		21 May 2001		drd		Created*/#include "CopyCommand.h"#include "PhotoPrintDoc.h"#include "PhotoPrintConstants.h"#include <UScrap.h>/*CopyCommand*/CopyCommand::CopyCommand(	const CommandT	inCommand, 	PhotoPrintDoc*	inDoc)	: PhotoDocCommandAttachment(inCommand, inDoc){} // CopyCommand/*~CopyCommand*/CopyCommand::~CopyCommand(){} // ~CopyCommand/*ExecuteCommand {OVERRIDE}*/void		CopyCommand::ExecuteCommand(void*				/*inCommandData*/){	// First put our private flavor on the clipboard. We use StHandleBlock to avoid leaks, and	// the braces mean this data is freed before we get the PICT.	// Note that we need double the memory.	{		StHandleBlock		xmlData(mDoc->GetView()->GetSelectedData(kClipFlavor));		UScrap::SetData(kClipFlavor, xmlData, true);			// Clear clipboard	}	StHandleBlock			pictData(mDoc->GetView()->GetSelectedData(kScrapFlavorTypePicture));	UScrap::SetData(kScrapFlavorTypePicture, pictData, false);	// Don't clear clipboard} // ExecuteCommand										 /*FindCommandStatus {OVERRIDE}	Sets its argument to TRUE if the command should be enabled (if anything is selected).	172 But it makes no sense to copy placeholdersÉ*/void		CopyCommand::FindCommandStatus(SCommandStatus* ioStatus){	Boolean					enabled = false;	const PhotoItemList&	selection = mDoc->GetView()->Selection();	if (!selection.empty()) {		// Be sure we have at least one non-placeholder selected		ConstPhotoIterator	i;		for (i = selection.begin(); i != selection.end(); i++) {			if (!(*i)->IsEmpty()) {				enabled = true;				break;			}		}	}	*ioStatus->enabled = enabled;} // FindCommandStatus