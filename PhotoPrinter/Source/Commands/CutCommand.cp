/*	File:		CutCommand.cp	Contains:	Implementation of the Cut command (in Edit menu).	Written by:	David Dunham	Copyright:	Copyright ©2001 by Electric Fish, Inc.  All Rights Reserved.	Change History (most recent first):		06 Aug 2001		rmgw	Add FindCommandStatus.  Bug #276.		18 Jul 2001		rmgw	Split up ImageActions.		21 May 2001		drd		Created*/#include "CutCommand.h"#include "DeleteAction.h"#include "PhotoPrintDoc.h"#include "PhotoPrintResources.h"/*CutCommand*/CutCommand::CutCommand(	const CommandT	inCommand, 	PhotoPrintDoc*	inDoc)	: CopyCommand(inCommand, inDoc){} // CutCommand/*~CutCommand*/CutCommand::~CutCommand(){} // ~CutCommand/*ExecuteCommand {OVERRIDE}	Cut consists of a Copy (which we aren't allowing to be undone) plus Clear*/void		CutCommand::ExecuteCommand(void*				inCommandData){	CopyCommand::ExecuteCommand(inCommandData);	mDoc->PostAction(new DeleteAction(mDoc, si_CutImage));} // ExecuteCommand										 /*FindCommandStatus {OVERRIDE}	Sets its argument to TRUE if the command should be enabled (if anything is selected)*/void		CutCommand::FindCommandStatus(SCommandStatus* ioStatus){	//	Default is disabled	*ioStatus->enabled = false;		//	No doc - disabled	if (!mDoc) return;		//	No view - disabled	PhotoPrintView*		view (mDoc->GetView ());	if (!view) return;		//	No layout - disabled	Layout*				layout (view->GetLayout ());	if (!layout) return;		//	Duplication layout - disabled	if (layout->ImagesAreDuplicated ()) return;		//	Empty selection - disabled	const PhotoItemList&	selection (view->Selection());	if (selection.empty()) return;		//	Search for a non-empty selection item	for (ConstPhotoIterator	i = selection.begin (); i != selection.end (); ++i) {		if ((*i)->IsEmpty()) continue;				*ioStatus->enabled = true;		break;		} // for} // FindCommandStatus