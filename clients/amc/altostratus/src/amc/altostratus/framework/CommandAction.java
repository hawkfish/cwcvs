/*File:		CommandAction.javaContains:	Action which can be checked.Written by:	David DunhamCopyright:	Copyright ©2000-2001 by Applied Microsystems Corporation.  All Rights reserved.Change History (most recent first):	05 Apr 2001		drd	Put into framework package	02 Mar 2001		drd	Vector through performAction instead of letting subclasses override						actionPerformed	02 Nov 2000		drd	Created*/package amc.altostratus.framework;import java.awt.event.ActionEvent;import javax.swing.AbstractAction;public abstract class CommandAction extends AbstractAction {	/**	Defines an Action object with the specified description string	and a default icon.	*/	public CommandAction(String aName) {		super(aName);	}	/**	Invoked when an action occurs.		@see ActionListener	*/	public void actionPerformed(ActionEvent anEvent) {		// We map this into a different method call to make it easier for subclasses to		// provide unified error handling. This class doesn't provide error handling,		// but subclasses can. The root class can thus descend from CommandAction, or a		// subclass which handles exceptions.		this.performAction(anEvent);	}	/**	Invoked when an action occurs.	*/	protected void performAction(ActionEvent anEvent) {		System.err.println("?" + this.getClass() + ".performAction not defined");	}	/**	Change the checked (selected) state	*/	public void setSelected(boolean aState) {		// Force the notification (by pretending our old state was different)		this.firePropertyChange("checked", new Boolean(!aState), new Boolean(aState));	}}