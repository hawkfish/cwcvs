/*File:		CommandButton.javaContains:	Button which lets us have actions.Written by:	David DunhamCopyright:	Copyright ©2001 by Applied Microsystems Corporation.  All Rights reserved.Change History (most recent first):	21 Feb 2001		drd	Created*/package amc.altostratus;import java.beans.*;import java.util.*;import javax.swing.*;class CommandButton extends JButton {	// Registry of listeners created for Action-JMenuItem linkage.  This is needed so that	// references can be cleaned up at remove time to allow GC.    private static Hashtable gListenerRegistry = null;	/**	Creates a new JButton with the supplied string as its text		@param s  The text for the menu label	*/	public CommandButton(String s) {		super(s);	}	/**	* Creates a button with initial text and an icon.	*	* @param text  the text of the button.	* @param icon  the Icon image to display on the button	*/	public CommandButton(String text, Icon anIcon, Action anAction) {		super(text, anIcon);		this.addActionListener(anAction);		PropertyChangeListener actionPropertyChangeListener = 			this.createActionChangeListener(this);		if (gListenerRegistry == null) {			gListenerRegistry = new Hashtable();		}		gListenerRegistry.put(this, anAction);		gListenerRegistry.put(anAction, actionPropertyChangeListener);		anAction.addPropertyChangeListener(actionPropertyChangeListener);	}	protected PropertyChangeListener createActionChangeListener(CommandButton anItem) {		return new ActionChangedListener(anItem);	}	private class ActionChangedListener implements PropertyChangeListener {		CommandButton		fButton;	// Our target		ActionChangedListener(CommandButton anItem) {			super();			this.setTarget(anItem);		}		/**		Handle a property change in our action		*/		public void propertyChange(PropertyChangeEvent e) {			String			propertyName = e.getPropertyName();//			System.out.println("propertyChange(" + fButton.getText() +//				") " + propertyName);			if (e.getPropertyName().equals(Action.NAME)) {				String		text = (String) e.getNewValue();				fButton.setText(text);			} else if (propertyName.equals("enabled")) {				Boolean		enabledState = (Boolean) e.getNewValue();				fButton.setEnabled(enabledState.booleanValue());			}		} // propertyChange		/**		Keep track of the specified menu item			@param anItem The item to target		*/		public void setTarget(CommandButton anItem) {			fButton = anItem;		}	}}