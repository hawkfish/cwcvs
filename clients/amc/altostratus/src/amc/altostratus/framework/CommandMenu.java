/*File:		CommandMenu.javaContains:	Menu which lets us have actions and JMenuItem subclasses. In effect, we are			simply altering JMenu.add(Action a) which creates JMenuItem, and instead			using an already-created JRadioButtonMenuItem.Written by:	David DunhamCopyright:	Copyright ©2000 by Applied Microsystems Corporation.  All Rights reserved.Change History (most recent first):	29 Nov 2000		drd	add initializes item's enabled state	02 Nov 2000		drd	propertyChange handles "checked"	01 Nov 2000		drd	Created*/package amc.altostratus;import java.beans.*;import java.util.*;import javax.swing.*;class CommandMenu extends JMenu {	// Registry of listeners created for Action-JMenuItem linkage.  This is needed so that	// references can be cleaned up at remove time to allow GC.    private static Hashtable gListenerRegistry = null;	/**	Creates a new JMenu with the supplied string as its text		@param s  The text for the menu label	*/	public CommandMenu(String s) {		super(s);	}	/**	Adds an already-existing menu item and associates an action with it.		@param anItem the menu item to add		@param anAction the action which the menu item should listen to		@see JMenu.add     */	public JRadioButtonMenuItem add(JRadioButtonMenuItem anItem, Action anAction) {        anItem.setEnabled(anAction.isEnabled());   		this.add(anItem);		PropertyChangeListener actionPropertyChangeListener = 			this.createActionChangeListener(anItem);		if (gListenerRegistry == null) {			gListenerRegistry = new Hashtable();		}		gListenerRegistry.put(anItem, anAction);		gListenerRegistry.put(anAction, actionPropertyChangeListener);		anAction.addPropertyChangeListener(actionPropertyChangeListener);		return anItem;	} // add	/**	Removes the specified menu item from this menu.		@param item the JMenuItem to be removed from the menu	*/	public void remove(JMenuItem item) {		super.remove(item);		if (gListenerRegistry != null) { 			ActionChangedListener	p = (ActionChangedListener)gListenerRegistry.remove(item);			Action					a = (Action)gListenerRegistry.remove(p);			item.removeActionListener(a);			if (p != null)				p.setTarget(null);			if (a!=null)				a.removePropertyChangeListener(p);		}	}	protected PropertyChangeListener createActionChangeListener(JMenuItem anItem) {		return new ActionChangedListener(anItem);	}	private class ActionChangedListener implements PropertyChangeListener {		JMenuItem		fMenuItem;	// Our target		ActionChangedListener(JMenuItem anItem) {			super();			this.setTarget(anItem);		}		/**		Handle a property change in our action		*/		public void propertyChange(PropertyChangeEvent e) {			String			propertyName = e.getPropertyName();//			System.out.println("propertyChange(" + fMenuItem.getText() +//				") " + propertyName);			if (e.getPropertyName().equals(Action.NAME)) {				String		text = (String) e.getNewValue();				fMenuItem.setText(text);			} else if (propertyName.equals("checked")) {				Boolean		checkedState = (Boolean) e.getNewValue();//				System.out.println(" checkedState=" + checkedState);				fMenuItem.setSelected(checkedState.booleanValue());			} else if (propertyName.equals("enabled")) {				Boolean		enabledState = (Boolean) e.getNewValue();				fMenuItem.setEnabled(enabledState.booleanValue());			} else if (e.getPropertyName().equals(Action.SMALL_ICON)) {				Icon		icon = (Icon) e.getNewValue();				fMenuItem.setIcon(icon);				fMenuItem.invalidate();				fMenuItem.repaint();			}		} // propertyChange		/**		Keep track of the specified menu item			@param anItem The item to target		*/		public void setTarget(JMenuItem anItem) {			fMenuItem = anItem;		}	}}