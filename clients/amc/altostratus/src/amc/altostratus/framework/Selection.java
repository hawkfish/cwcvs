/*File:		Selection.javaContains:	Manages our concept of a selectionWritten by:	David DunhamCopyright:	Copyright ©2000-2001 by Applied Microsystems Corporation.  All Rights reserved.Change History (most recent first):	05 Apr 2001		drd	Put into framework package (and made public)	22 Jan 2001		drd	getSelection	30 Oct 2000		drd	setSelection	20 Oct 2000		drd	Created*/package amc.altostratus.framework;import java.util.*;/**Represents the single AltoStratus selection. "Single" is actually misleading, sincemultiple items can be selected. The point is, whenever something is selected, we wantto know about it here.<p>Because this is not intended to be subclassed, you don't deal with a selection object,but instead use class methods.	@author David Dunham*/public class Selection{	static Vector	gSelection = new Vector();	/**	Extends the selection by adding a new item.		@param anItem The newly selected item	*/	public static void	addToSelection(Selectable anItem) {		gSelection.addElement(anItem);		anItem.setSelected(true);	}	/**	Deselect everything.	*/	public static void	clearSelection() {		Enumeration		elements = gSelection.elements();		while(elements.hasMoreElements()) {			Selectable	theItem = (Selectable) elements.nextElement();			theItem.setSelected(false);		}		gSelection.removeAllElements();	}	public static Vector	getSelection() {		if (gSelection.size() <= 0)			return null;		else			return gSelection;	}	/**	Reduces the number of selected items.		@param anItem The item to remove from the selection	*/	public static void	removeFromSelection(Selectable anItem) {		gSelection.removeElement(anItem);		anItem.setSelected(false);	}	/**	Sets the selection to be the single item.		@param anItem The new selection	*/	public static void	setSelection(Selectable anItem) {		// Be sure it isn't already in the selection		if (!gSelection.contains(anItem)) {			clearSelection();			addToSelection(anItem);		}	}}